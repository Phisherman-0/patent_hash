import { useState } from "react";
import { useMutation } from "@tanstack/react-query";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Skeleton } from "@/components/ui/skeleton";
import { Separator } from "@/components/ui/separator";
import { ScrollArea } from "@/components/ui/scroll-area";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import { Edit3, FileText, Brain, Download, Copy, RefreshCw, Lightbulb, CheckCircle } from "lucide-react";

const draftingSchema = z.object({
  title: z.string().min(5, "Title must be at least 5 characters"),
  description: z.string().min(50, "Description must be at least 50 characters"),
  category: z.enum([
    "medical_technology",
    "software_ai", 
    "renewable_energy",
    "manufacturing",
    "biotechnology",
    "automotive",
    "telecommunications",
    "other"
  ]),
});

type DraftingForm = z.infer<typeof draftingSchema>;

const categoryLabels = {
  medical_technology: "Medical Technology",
  software_ai: "Software & AI",
  renewable_energy: "Renewable Energy", 
  manufacturing: "Manufacturing",
  biotechnology: "Biotechnology",
  automotive: "Automotive",
  telecommunications: "Telecommunications",
  other: "Other"
};

export default function DraftingAssistant() {
  const { toast } = useToast();
  const [draftDocument, setDraftDocument] = useState<any>(null);
  const [currentSection, setCurrentSection] = useState("abstract");

  const form = useForm<DraftingForm>({
    resolver: zodResolver(draftingSchema),
    defaultValues: {
      title: "",
      description: "",
    },
  });

  const draftingMutation = useMutation({
    mutationFn: async (data: DraftingForm) => {
      const response = await apiRequest('/api/ai/patent-drafting', {
        method: 'POST',
        body: JSON.stringify(data),
      });
      return response;
    },
    onSuccess: (data) => {
      setDraftDocument(data);
      toast({
        title: "Draft Generated",
        description: "AI-powered patent draft has been generated successfully.",
      });
    },
    onError: (error: any) => {
      toast({
        title: "Drafting Failed",
        description: error.message || "Failed to generate patent draft. Please try again.",
        variant: "destructive",
      });
    },
  });

  const onSubmit = (data: DraftingForm) => {
    draftingMutation.mutate(data);
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
    toast({
      title: "Copied to clipboard",
      description: "Text has been copied to your clipboard.",
    });
  };

  const downloadDraft = () => {
    if (!draftDocument) return;

    const content = `
PATENT APPLICATION DRAFT
Generated by AI Patent Drafting Assistant

TITLE: ${draftDocument.title}

ABSTRACT
${draftDocument.abstract}

BACKGROUND OF THE INVENTION
${draftDocument.background}

SUMMARY OF THE INVENTION  
${draftDocument.summary}

DETAILED DESCRIPTION
${draftDocument.detailedDescription}

CLAIMS
${draftDocument.claims.map((claim: string, index: number) => `${index + 1}. ${claim}`).join('\n\n')}

CONCLUSION
${draftDocument.conclusion}
    `.trim();

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${draftDocument.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_patent_draft.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "Draft Downloaded",
      description: "Patent draft has been downloaded as a text file.",
    });
  };

  const sections = [
    { id: "abstract", label: "Abstract", icon: FileText },
    { id: "background", label: "Background", icon: Lightbulb },
    { id: "summary", label: "Summary", icon: CheckCircle },
    { id: "detailed", label: "Detailed Description", icon: Edit3 },
    { id: "claims", label: "Claims", icon: Brain },
    { id: "conclusion", label: "Conclusion", icon: CheckCircle },
  ];

  const getSectionContent = () => {
    if (!draftDocument) return null;

    switch (currentSection) {
      case "abstract":
        return draftDocument.abstract;
      case "background":
        return draftDocument.background;
      case "summary":
        return draftDocument.summary;
      case "detailed":
        return draftDocument.detailedDescription;
      case "claims":
        return draftDocument.claims?.map((claim: string, index: number) => 
          `${index + 1}. ${claim}`
        ).join('\n\n');
      case "conclusion":
        return draftDocument.conclusion;
      default:
        return "";
    }
  };

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold">AI Patent Drafting Assistant</h1>
        <p className="text-muted-foreground mt-2">
          Generate professional patent application drafts using AI-powered analysis and industry best practices
        </p>
      </div>

      <div className="grid gap-6 lg:grid-cols-3">
        {/* Input Form */}
        <div className="lg:col-span-1">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Brain className="h-5 w-5" />
                Invention Details
              </CardTitle>
              <CardDescription>
                Provide your invention details to generate a comprehensive patent draft
              </CardDescription>
            </CardHeader>
            <CardContent>
              <Form {...form}>
                <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
                  <FormField
                    control={form.control}
                    name="title"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Invention Title</FormLabel>
                        <FormControl>
                          <Input 
                            placeholder="e.g., Smart Renewable Energy Management System"
                            {...field} 
                          />
                        </FormControl>
                        <FormDescription>
                          Provide a clear, descriptive title for your invention
                        </FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="category"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Technology Category</FormLabel>
                        <Select onValueChange={field.onChange} value={field.value}>
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="Select category" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            {Object.entries(categoryLabels).map(([value, label]) => (
                              <SelectItem key={value} value={value}>
                                {label}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                        <FormDescription>
                          Select the primary technology category
                        </FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="description"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Detailed Description</FormLabel>
                        <FormControl>
                          <Textarea 
                            placeholder="Describe your invention in detail: what it does, how it works, what problems it solves, what makes it unique..."
                            className="min-h-32"
                            {...field} 
                          />
                        </FormControl>
                        <FormDescription>
                          Provide a comprehensive description of your invention
                        </FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <Button 
                    type="submit" 
                    disabled={draftingMutation.isPending}
                    className="w-full"
                  >
                    {draftingMutation.isPending ? (
                      <>
                        <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                        Generating Draft...
                      </>
                    ) : (
                      <>
                        <Edit3 className="mr-2 h-4 w-4" />
                        Generate Patent Draft
                      </>
                    )}
                  </Button>
                </form>
              </Form>

              {/* Tips */}
              <div className="mt-6 p-4 bg-blue-50 dark:bg-blue-950 rounded-lg">
                <h4 className="font-medium text-blue-800 dark:text-blue-200 mb-2">
                  💡 Drafting Tips
                </h4>
                <ul className="text-xs text-blue-700 dark:text-blue-300 space-y-1">
                  <li>• Be specific about technical details</li>
                  <li>• Explain the problem your invention solves</li>
                  <li>• Describe what makes it unique</li>
                  <li>• Include how it works or operates</li>
                </ul>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Draft Output */}
        <div className="lg:col-span-2">
          {draftingMutation.isPending ? (
            <Card>
              <CardHeader>
                <div className="flex items-center gap-2">
                  <RefreshCw className="h-5 w-5 animate-spin" />
                  <CardTitle>Generating Patent Draft...</CardTitle>
                </div>
                <CardDescription>
                  AI is analyzing your invention and generating a comprehensive patent draft
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {sections.map((section, index) => (
                    <div key={section.id} className="space-y-2">
                      <Skeleton className="h-4 w-32" />
                      <Skeleton className="h-20 w-full" />
                      {index < sections.length - 1 && <Separator />}
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          ) : draftDocument ? (
            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <div>
                    <CardTitle className="flex items-center gap-2">
                      <FileText className="h-5 w-5" />
                      Patent Application Draft
                    </CardTitle>
                    <CardDescription>
                      "{draftDocument.title}"
                    </CardDescription>
                  </div>
                  <div className="flex gap-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => copyToClipboard(getSectionContent() || "")}
                    >
                      <Copy className="h-4 w-4 mr-1" />
                      Copy
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={downloadDraft}
                    >
                      <Download className="h-4 w-4 mr-1" />
                      Download
                    </Button>
                  </div>
                </div>

                {/* Section Navigation */}
                <div className="flex gap-1 flex-wrap">
                  {sections.map((section) => (
                    <Button
                      key={section.id}
                      variant={currentSection === section.id ? "default" : "outline"}
                      size="sm"
                      onClick={() => setCurrentSection(section.id)}
                      className="text-xs"
                    >
                      <section.icon className="h-3 w-3 mr-1" />
                      {section.label}
                    </Button>
                  ))}
                </div>
              </CardHeader>
              <CardContent>
                <ScrollArea className="h-[600px] w-full">
                  <div className="prose prose-sm max-w-none dark:prose-invert">
                    <div className="whitespace-pre-wrap">
                      {getSectionContent()}
                    </div>
                  </div>
                </ScrollArea>
              </CardContent>
            </Card>
          ) : (
            <Card>
              <CardContent className="flex flex-col items-center justify-center py-20">
                <Edit3 className="h-16 w-16 text-muted-foreground mb-4" />
                <h3 className="text-lg font-semibold mb-2">Ready to Generate Your Patent Draft</h3>
                <p className="text-muted-foreground text-center">
                  Fill out the invention details on the left to generate a comprehensive, 
                  AI-powered patent application draft with all required sections.
                </p>
              </CardContent>
            </Card>
          )}
        </div>
      </div>

      {/* Features Information */}
      <div className="grid gap-6 md:grid-cols-3">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-base">
              <Brain className="h-4 w-4" />
              AI-Powered Analysis
            </CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-muted-foreground">
              Advanced AI analyzes your invention details and generates professional patent language following industry standards and best practices.
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-base">
              <FileText className="h-4 w-4" />
              Complete Structure
            </CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-muted-foreground">
              Generates all essential patent sections including abstract, background, summary, detailed description, claims, and conclusion.
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-base">
              <CheckCircle className="h-4 w-4" />
              Ready to File
            </CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-muted-foreground">
              Professional-grade drafts that serve as excellent starting points for patent attorneys or direct filing with patent offices.
            </p>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}